# tts_worker/Dockerfile or Dockerfile.tts
FROM python:3.12-slim

LABEL maintainer="Your Name <you@example.com>"
LABEL description="TTS Worker for the Voice Assistant Platform"

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    PATH="/app/.local/bin:$PATH"

# Install uv
RUN pip install uv

# Install any system dependencies Piper might need (e.g., for audio playback/processing, though Piper outputs raw audio)
# Example: RUN apt-get update && apt-get install -y --no-install-recommends some-audio-lib && rm -rf /var/lib/apt/lists/*
# For Piper, it's mostly self-contained or uses common libs. This might not be strictly needed if Piper executable is bundled.

WORKDIR /app

# Create a non-root user and group
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /sbin/nologin -c "Docker image user" appuser

# Copy dependency files for the TTS worker
COPY tts_worker/pyproject.toml tts_worker/uv.lock* ./

# Install dependencies using uv
RUN uv sync

# Copy the worker application code
# This should include the Piper executable and voice models if they are to be bundled.
# Paths in tts_worker/config.py for Piper would need to reflect their location within the image.
COPY ./tts_worker /app/tts_worker

# Ensure the app directory and its contents are owned by the appuser
RUN chown -R appuser:appuser /app

# Switch to the non-root user
USER appuser

# Command to run the TTS worker
CMD ["python", "-m", "tts_worker.main"] 